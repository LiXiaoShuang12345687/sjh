@@ -0,0 +1,378 @@
#f1<-function(data_new,Threshold,Weight.wwt,Weight.nox,Weight.rt){#参数为寻优指标和工况和主成分阀值，data.new需带列名
       #返回寻优结果




Threshold=0.9
Weight.wwt=0.5
Weight.nox=0.4
Weight.rt=0.1



files<-dir("D:/合成兴业/#2稳态数据各个组合/#2工况")
#condition<-files[1]


for(condition in files){
#
result=NULL
data<-read.csv(paste("D:/合成兴业/#2稳态数据各个组合/#2工况/",condition,sep=''))###
#


scale1<-function(x) (x-min(x))/(max(x)-min(x)+0.0000001)#归一化
Z<-scale1((data$ZWA+data$ZWB+data$ZWC+data$ZWD)/2)
Z1<-scale1((data$ZWA1+data$ZWB1+data$ZWC1+data$ZWD1)/2)
Z2<-scale1((data$ZWA2+data$ZWB2+data$ZWC2+data$ZWD2)/2)
Z3<-scale1((data$ZWA3+data$ZWB3+data$ZWC3+data$ZWD3)/2)
Z4<-scale1((data$ZWA4+data$ZWB4+data$ZWC4+data$ZWD4)/2)
Z5<-scale1((data$ZWA5+data$ZWB5+data$ZWC5+data$ZWD5)/2)
#Z6<-scale1((data$ZWA6+data$ZWB6+data$ZWC6+data$ZWD6)/2)
Z7<-scale1((data$ZWA7+data$ZWB7+data$ZWC7+data$ZWD7)/2)
Z8<-scale1((data$ZWA8+data$ZWB8+data$ZWC8+data$ZWD8)/2)
Z9<-scale1((data$ZWA9+data$ZWB9+data$ZWC9+data$ZWD9)/2)
Z10<-scale1((data$ZWA10+data$ZWB10+data$ZWC10+data$ZWD10)/2)
#Z11<-scale1((data$ZWA11+data$ZWB11+data$ZWC11+data$ZWD11)/2)
Z12<-scale1((data$ZWA12+data$ZWB12+data$ZWC12+data$ZWD12)/2)
Z13.1<-scale1((data$ZWA13+data$ZWB13)/2)
Z13.2<-scale1((data$ZWC13+data$ZWD13)/2)

Z14<-scale1((data$ZWA14+data$ZWB14+data$ZWC14+data$ZWD14)/2)
Z15<-scale1((data$ZWA15+data$ZWB15+data$ZWC15+data$ZWD15)/2)


S<-scale1((data$SOFA+data$SOFB+data$SOFC+data$SOFD)/2)
S1<-scale1((data$SOFA1+data$SOFB1+data$SOFC1+data$SOFD1)/2)
S2<-scale1((data$SOFA2+data$SOFB2+data$SOFC2+data$SOFD2)/2)
S3<-scale1((data$SOFA3+data$SOFB3+data$SOFC3+data$SOFD3)/2)
S4<-scale1((data$SOFA4+data$SOFB4+data$SOFC4+data$SOFD4)/2)
####+—1

M1<-scale1(data$SM_A)
M2<-scale1(data$SM_B)
M3<-scale1(data$SM_C)
M4<-scale1(data$SM_D)
M5<-scale1(data$SM_E)
M6<-scale1(data$SM_F)
####+—1

E1<-scale1(data$EWLM_A)
E2<-scale1(data$EWLM_B)
E3<-scale1(data$EWLM_C)
E4<-scale1(data$EWLM_D)
E5<-scale1(data$EWLM_E)
E.ALL<-scale1(data$EWLM_A+data$EWLM_B+data$EWLM_C+data$EWLM_D+data$EWLM_E+data$EWLM_F)

ZW.A<-scale1(data$Zwei_windleistungA);
ZW.ALL<-scale1(data$Zwei_windleistungA+data$Zwei_windleistungB);
####+—15

d1<-cbind(Z,Z1,Z2,Z3,Z4,Z5,Z7,Z8,Z9,Z10,Z12,Z13.1,Z13.2,Z14,Z15,S,S1,S2,S3,S4)
d2<-cbind(M1,M2,M3,M4,M5,M6)
d3<-cbind(E1,E2,E3,E4,E5,E.ALL,ZW.A,ZW.ALL)
##
pr1<-princomp(d1)
for(i in seq(ncol(d1))){#确定选取几个主成分
if(sum(pr1$sdev[seq(i)]^2)/sum(pr1$sdev^2)>Threshold){
count1=i
break
}}
#做主成分
ZCF1<-rep(0,nrow(d1))
for(i in seq(count1)) {
 temp<-rep(0,nrow(d1))
  for(j in 1:ncol(d1)) temp<-temp+d1[,j]*pr1$loading[j,i]
  ZCF1<-cbind(ZCF1,temp)
}
ZCF1<-ZCF1[,-1]
##
pr2<-princomp(d2)
for(i in seq(ncol(d2))){#确定选取几个主成分
if(sum(pr2$sdev[seq(i)]^2)/sum(pr2$sdev^2)>Threshold){
count2=i
break
}}
#做主成分
ZCF2<-rep(0,nrow(d2))
for(i in seq(count2)) {
 temp<-rep(0,nrow(d2))
  for(j in 1:ncol(d2)) temp<-temp+d2[,j]*pr2$loading[j,i]
  ZCF2<-cbind(ZCF2,temp)
}
ZCF2<-ZCF2[,-1]
##
pr3<-princomp(d3)
for(i in seq(ncol(d3))){#确定选取几个主成分
if(sum(pr3$sdev[seq(i)]^2)/sum(pr3$sdev^2)>Threshold){
count3=i
break
}}
#做主成分
ZCF3<-rep(0,nrow(d3))
for(i in seq(count3)) {
 temp<-rep(0,nrow(d3))
  for(j in 1:ncol(d3)) temp<-temp+d3[,j]*pr3$loading[j,i]
  ZCF3<-cbind(ZCF3,temp)
}
ZCF3<-ZCF3[,-1]
 ###构建综合指标Y,越大越好
Y1 <- data$RT
Y2 <- (data$EinNOX_A+data$EinNOX_B)/2
Y3 <- (data$WWT_A+data$WWT_B)/2
Y <- Y3*Weight.wwt - Y2*Weight.nox - Y1*Weight.rt

ZCF<-cbind(ZCF1,ZCF2,ZCF3)
lm.sol<-lm(scale1(Y)~ZCF)
#coeff.sd<-summary(lm.sol)$coeff[, "Std. Error"]#回归方程各个系数的标准差
#RCOR<-cor(lm.sol$residuals,scale1(Y))#残差与Y的相关系数
R_Squared<-(summary(lm.sol))$r.squared
#if(R_Squared>=0.6){
 y_hat<-rev(sort(fitted(lm.sol)))[1:5]#最优的5个值
 y_hat_back<-y_hat*(max(Y)-min(Y))+min(Y)
residuals.sd<-1.96*sd(lm.sol$residuals)
residuals.sd_back<-residuals.sd*(max(Y)-min(Y))
hat<-cbind(data[as.numeric(names(y_hat)),],y_hat_back,y_hat) 
#得出5个最优中与第一个最优距离在2倍残差标准差之内的数据
result<-hat[which(hat$y_hat>=y_hat[1]-sd(lm.sol$residuals) & hat$y_hat<=y_hat[1]+sd(lm.sol$residuals)),]
number<-rep(nrow(data),nrow(result))

x<-c()
pinshu<-c()
for(j in 1:nrow(result)){
best<-result[j,]
data.pinshu<-data
for(i in names(data)[14:21]){
data.pinshu<-subset(data.pinshu,data.pinshu[,i]>=best[,i]-15 & data.pinshu[,i]<=best[,i]+15)
pinshu[j]<-nrow(data.pinshu)
#x<-c(x,nrow(data.pinshu))
}
for(i in names(data)[c(22,23,27:29,42:57,93,121:126)]){
data.pinshu<-subset(data.pinshu,data.pinshu[,i]>=best[,i]-1 & data.pinshu[,i]<=best[,i]+1)
pinshu[j]<-nrow(data.pinshu)
#x<-c(x,nrow(data.pinshu))
}
}

r1<-result$y_hat_back-residuals.sd_back
r2<-result$y_hat_back+residuals.sd_back

result1<-cbind(number,pinshu,result,r1,r2)
write.csv(result1,paste("D:/合成兴业/三热/主成分回归结果/寻优结果",condition,sep=''))
}



data.new<-data[5,]

##返回工况名
condition<-function(data.new){
result<-'寻优结果'
d<-c(620,675,747,813,885,946,1017,1077)
k<-c(96,104,112,120,128,136,145,152,159,170,179,190,201,211,221,230,240,248)


for(j in 1:(length(k)-1)){
if(data.new['Kolneleistung']>=k[j]&data.new['Kolneleistung']<k[j+1])  result<-paste(result,paste(k[j],k[j+1],sep='-'),sep='')
}
for(i in 1:(length(d)-1)){
if(data.new['Dampfleistung']>=d[i]&data.new['Dampfleistung']<d[i+1])  result<-paste(result,',',paste(d[i],d[i+1],sep='-'),sep='')
}

count<-0
for(z in c("SM_A","SM_B","SM_C","SM_D","SM_E","SM_F")){
count<-count+1
if(unlist(data.new[z])>=25){
result<-paste(result,LETTERS[count],sep='')
}

}
return(result)
}











#测试集数据
data<-read.csv("D:\\合成兴业\\三热\\#2测试数据.csv")

dim(data)

test<-c()
last<-c()
for(i in 15000:30000){
data.new<-data[i,]
cond<-condition(data.new)
if(length(intersect(paste(cond,".csv",sep=''),dir("D:/合成兴业/三热/主成分回归结果/")))==1){
result<-read.csv(paste("D:/合成兴业/三热/主成分回归结果/",cond,".csv",sep=''))
##计算与data_new距离最近的最优
best<-result[1,]
distance<-10000000000000
 #data_new<-t(as.matrix(data_new))

for(l in seq(nrow(result))){
distance_temp<-(result[l,'ZWA1']-as.numeric(data.new[1,'ZWA1']))^2+
		(result[l,'ZWA2']-as.numeric(data.new[1,'ZWA2']))^2+
		(result[l,'ZWA3']-as.numeric(data.new[1,'ZWA3']))^2+
		(result[l,'ZWA4']-as.numeric(data.new[1,'ZWA4']))^2+
            (result[l,'ZWA5']-as.numeric(data.new[1,'ZWA5']))^2+
		(result[l,'ZWA7']-as.numeric(data.new[1,'ZWA7']))^2+
		(result[l,'ZWA8']-as.numeric(data.new[1,'ZWA8']))^2+
		(result[l,'ZWA9']-as.numeric(data.new[1,'ZWA9']))^2+
		(result[l,'ZWA10']-as.numeric(data.new[1,'ZWA10']))^2+
		(result[l,'ZWA12']-as.numeric(data.new[1,'ZWA12']))^2+
		(result[l,'ZWA13']-as.numeric(data.new[1,'ZWA13']))^2+
		(result[l,'ZWA14']-as.numeric(data.new[1,'ZWA14']))^2+
		(result[l,'ZWA15']-as.numeric(data.new[1,'ZWA15']))^2+

            (result[l,'ZWB1']-as.numeric(data.new[1,'ZWB1']))^2+
		(result[l,'ZWB2']-as.numeric(data.new[1,'ZWB2']))^2+
		(result[l,'ZWB3']-as.numeric(data.new[1,'ZWB3']))^2+
		(result[l,'ZWB4']-as.numeric(data.new[1,'ZWB4']))^2+
            (result[l,'ZWB5']-as.numeric(data.new[1,'ZWB5']))^2+
		(result[l,'ZWB7']-as.numeric(data.new[1,'ZWB7']))^2+
		(result[l,'ZWB8']-as.numeric(data.new[1,'ZWB8']))^2+
		(result[l,'ZWB9']-as.numeric(data.new[1,'ZWB9']))^2+
		(result[l,'ZWB10']-as.numeric(data.new[1,'ZWB10']))^2+
		(result[l,'ZWB12']-as.numeric(data.new[1,'ZWB12']))^2+
		(result[l,'ZWB13']-as.numeric(data.new[1,'ZWB13']))^2+
		(result[l,'ZWB14']-as.numeric(data.new[1,'ZWB14']))^2+
		(result[l,'ZWB15']-as.numeric(data.new[1,'ZWB15']))^2+

            (result[l,'ZWC1']-as.numeric(data.new[1,'ZWC1']))^2+
		(result[l,'ZWC2']-as.numeric(data.new[1,'ZWC2']))^2+
		(result[l,'ZWC3']-as.numeric(data.new[1,'ZWC3']))^2+
		(result[l,'ZWC4']-as.numeric(data.new[1,'ZWC4']))^2+
            (result[l,'ZWC5']-as.numeric(data.new[1,'ZWC5']))^2+
		(result[l,'ZWC7']-as.numeric(data.new[1,'ZWC7']))^2+
		(result[l,'ZWC8']-as.numeric(data.new[1,'ZWC8']))^2+
		(result[l,'ZWC9']-as.numeric(data.new[1,'ZWC9']))^2+
		(result[l,'ZWC10']-as.numeric(data.new[1,'ZWC10']))^2+
		(result[l,'ZWC12']-as.numeric(data.new[1,'ZWC12']))^2+
		(result[l,'ZWC13']-as.numeric(data.new[1,'ZWC13']))^2+
		(result[l,'ZWC14']-as.numeric(data.new[1,'ZWC14']))^2+
		(result[l,'ZWC15']-as.numeric(data.new[1,'ZWC15']))^2+

            (result[l,'ZWD1']-as.numeric(data.new[1,'ZWD1']))^2+
		(result[l,'ZWD2']-as.numeric(data.new[1,'ZWD2']))^2+
		(result[l,'ZWD3']-as.numeric(data.new[1,'ZWD3']))^2+
		(result[l,'ZWD4']-as.numeric(data.new[1,'ZWD4']))^2+
            (result[l,'ZWD5']-as.numeric(data.new[1,'ZWD5']))^2+
		(result[l,'ZWD7']-as.numeric(data.new[1,'ZWD7']))^2+
		(result[l,'ZWD8']-as.numeric(data.new[1,'ZWD8']))^2+
		(result[l,'ZWD9']-as.numeric(data.new[1,'ZWD9']))^2+
		(result[l,'ZWD10']-as.numeric(data.new[1,'ZWD10']))^2+
		(result[l,'ZWD12']-as.numeric(data.new[1,'ZWD12']))^2+
		(result[l,'ZWD13']-as.numeric(data.new[1,'ZWD13']))^2+
		(result[l,'ZWD14']-as.numeric(data.new[1,'ZWD14']))^2+
		(result[l,'ZWD15']-as.numeric(data.new[1,'ZWD15']))^2+

		(result[l,'SM_A']-as.numeric(data.new[1,'SM_A']))^2+	
		(result[l,'SM_B']-as.numeric(data.new[1,'SM_B']))^2+
		(result[l,'SM_C']-as.numeric(data.new[1,'SM_C']))^2+
		(result[l,'SM_D']-as.numeric(data.new[1,'SM_D']))^2+
		(result[l,'SM_E']-as.numeric(data.new[1,'SM_E']))^2+
		(result[l,'SM_F']-as.numeric(data.new[1,'SM_F']))^2+

		(result[l,'SOFA1']-as.numeric(data.new[1,'SOFA1']))^2+
		(result[l,'SOFA2']-as.numeric(data.new[1,'SOFA2']))^2+
		(result[l,'SOFA3']-as.numeric(data.new[1,'SOFA3']))^2+
		(result[l,'SOFA4']-as.numeric(data.new[1,'SOFA4']))^2+

(result[l,'EWLM_A']-as.numeric(data.new[1,'EWLM_A']))^2+	
(result[l,'EWLM_B']-as.numeric(data.new[1,'EWLM_B']))^2+
(result[l,'EWLM_C']-as.numeric(data.new[1,'EWLM_C']))^2+
(result[l,'EWLM_D']-as.numeric(data.new[1,'EWLM_D']))^2+
(result[l,'EWLM_E']-as.numeric(data.new[1,'EWLM_E']))^2+
(result[l,'EWLM_F']-as.numeric(data.new[1,'EWLM_F']))^2+

(result[l,'Zwei_windleistungB']-as.numeric(data.new[1,'Zwei_windleistungB']))^2+
(result[l,'Zwei_windleistungA']-as.numeric(data.new[1,'Zwei_windleistungA']))^2
  if(distance_temp<distance) {
		best<-result[l,]
		distance<-distance_temp
		
	}
}
test<-rbind(test,data.new)
last<-rbind(last,best)
}
}
test<-test[-6797,]
last<-last[-6797,]

write.csv(last,"D:/合成兴业/三热/寻优结果.csv")
write.csv(test,"D:/合成兴业/三热/测试数据.csv")

####
test.nox<-(test[,'EinNOX_A']+test[,'EinNOX_B'])/2
last.nox<-(last[,'EinNOX_A']+last[,'EinNOX_B'])/2

test.wwt<-(test[,'WWT_A']+test[,'WWT_B'])/2
last.wwt<-(last[,'WWT_A']+last[,'WWT_B'])/2

plot(last.wwt,ylab='再热气温',type='l',col='red',ylim=c(505,540))
lines(test.wwt,type='l',col='blue')
legend('topleft',legend=c("寻优结果","测试数据"),col=c('red','blue'),lty=1)


plot(last.nox,ylab='NOX',type='l',col='red',ylim=c(180,350))
lines(test.nox,type='l',col='blue')
legend('bottomleft',legend=c("寻优结果","测试数据"),col=c('red','blue'),lty=1)

plot(last$RT,ylab='排烟温度',type='l',col='red')#,ylim=c(505,540))
lines(test$RT,type='l',col='blue')
legend('top',legend=c("寻优结果","测试数据"),col=c('red','blue'),lty=1,ncol=2)

##置信区间绘图
Weight.wwt=0.5
Weight.nox=0.4
Weight.rt=0.1

test.y<-0.5*(test[,'WWT_A']+test[,'WWT_B'])/2-0.4*(test[,'EinNOX_A']+test[,'EinNOX_B'])/2-0.1*test[,'RT']
last.y<-last[,'y_hat_back']
last$r1
last$r2
plot(last.y,ylab='0.5*WWT-0.4*nox-0.1*rt',type='l',col='red',ylim=c(100,200))
lines(last$r1,type='l',col='blue')
lines(last$r2,type='l',col='blue')
lines(test.y,type="l",col='green')
legend("top",legend=c("寻优结果","置信区间上（下）限","测试数据"),col=c("red","blue","green"),ncol=3,lty=1)


##单个测试数据绘图
cond<-condition(data[600,])
temp<-read.csv(paste("D:/合成兴业/回归数据/",cond,".csv",sep=''))
summary(temp[,'再热器温度'])
summary((temp[,'nox进口A']+temp[,'NOX.B'])/2)

nox<-(temp[,'nox进口A']+temp[,'NOX.B'])/2

plot(temp[,'再热器温度'],type='l')
title("测试数据所在工况下再热器温度")
lines(x=1:500,y=rep(data[600,'再热器温度'],500))
text(locator(1,type='1'),"测试数据再热器温度")

lines(x=1:500,y=rep(best['再热器温度'],500),col="red")
text(locator(1,type='1'),"寻优数据再热器温度")
#
plot(nox,type='l')
title("测试数据所在工况下nox")
lines(x=1:500,y=rep((data[600,'nox进口A']+data[600,'NOX.B'])/2,500))
text(locator(1,type='1'),paste("测试数据nox",round((data[600,'nox进口A']+data[600,'NOX.B'])/2),sep=''))

lines(x=1:500,y=rep((best['nox进口A']+best['NOX.B'])/2,500),col="red")
text(locator(1,type='1'),paste("寻优数据nox",round((best['nox进口A']+best['NOX.B'])/2),sep=''))




